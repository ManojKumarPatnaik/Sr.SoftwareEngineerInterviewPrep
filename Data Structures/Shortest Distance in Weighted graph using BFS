//Shortest Distance in Weighted graph using BFS
// Given a directed graph where every edge has weight as either 1 or 2, find the shortest path from a given source vertex ‘s’ to a given destination vertex ‘t’. Expected time complexity is O(V+E).
import java.util.*;
  
class GFG 
{
 
    static class Shortest 
    {
        int V; 
        Vector<Integer>[] adj; // No. of vertices
  
        static int level;
  
        @SuppressWarnings("unchecked")
        Shortest(int V)
        {
            this.V = V;
            this.adj = new Vector[2 * V];
  
            for (int i = 0; i < 2 * V; i++)
                this.adj[i] = new Vector<>();
        }
  
 
        public void addEdge(int v, int w, int weight)
        {
 
            if (weight == 2) 
            {
                adj[v].add(v + this.V);
                adj[v + this.V].add(w);
            } else // Weight is 1
                adj[v].add(w); 
        }
        public int printShortestPath(int[] parent, int s, int d)
        {
            level = 0;
            if (parent[s] == -1)
            {
                System.out.printf("Shortest Path between"+ 
                                "%d and %d is %s ", s, d, s);
                return level;
            }
  
            printShortestPath(parent, parent[s], d);
  
            level++;
            if (s < this.V)
                System.out.printf("%d ", s);
  
            return level;
        }
  
        
        public int findShortestPath(int src, int dest)
        {
            boolean[] visited = new boolean[2 * this.V];
            int[] parent = new int[2 * this.V];
  
            // Initialize parent[] and visited[]
            for (int i = 0; i < 2 * this.V; i++) 
            {
                visited[i] = false;
                parent[i] = -1;
            }
  
         
            Queue<Integer> queue = new LinkedList<>();
  
          
            visited[src] = true;
            queue.add(src);
  
            while (!queue.isEmpty()) 
            {
                int s = queue.peek();
  
                if (s == dest)
                    return printShortestPath(parent, s, dest);
                queue.poll();
  
           
                for (int i : this.adj[s]) 
                {
                    if (!visited[i]) 
                    {
                        visited[i] = true;
                        queue.add(i);
                        parent[i] = s;
                    }
                }
            }
            return 0;
        }
    }
    
    public static void main(String[] args)
    {
  
        // Create a graph given in the above diagram
        int V = 4;
        Shortest s = new Shortest(V);
        s.addEdge(0, 1, 2);
        s.addEdge(0, 2, 2);
        s.addEdge(1, 2, 1);
        s.addEdge(1, 3, 1);
        s.addEdge(2, 0, 1);
        s.addEdge(2, 3, 2);
        s.addEdge(3, 3, 2);
  
        int src = 0, dest = 3;
        System.out.printf("\nShortest Distance between" + 
                            " %d and %d is %d\n", src, 
                            dest, g.findShortestPath(src, dest));
    }}
    
    Output -
    ## Shortest Path between 0 and 3 is 0 1 3 
    ## Shortest Distance between 0 and 3 is 3
